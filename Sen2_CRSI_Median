// Sentinel-2
// Scudiero, E., Skaggs, T.H., Corwin, D.L., 2014. Regional scale soil salinity evaluation using Landsat 7, western San Joaquin Valley, California, USA. Geoderma Reg. 2–3, 82–90. https://doi.org/10.1016/j.geodrs.2014.10.004

// Filter an image collection by date and region to make a
// median pixel composite.
//
// See also: ClippedComposite, which crops the output image
// instead of filtering the input collection.

// Filter to only include images within a defined area.
var polygon = ee.Geometry.Polygon({
  coords: [[[-114.06, 49.00], [-115.22, 51.53], [-116.23, 53.74], [-115.82, 55.94], [-109.76, 56.03], [-109.81, 49.00]
  ]],
  geodesic: false
});


/**
 * Function to mask clouds using the Sentinel-2 QA band
 * @param {ee.Image} image Sentinel-2 image
 * @return {ee.Image} cloud masked Sentinel-2 image
 */
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}


// Create a Sentinel 2 composite, and filter by
// the bounds of the FeatureCollection.
var collection = 
    ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
    .filter(ee.Filter.calendarRange(5,10,'month'))
    .filterBounds(polygon)
    .map(maskS2clouds);

// Function to calculate and add an CRSI band
var addCRSI = function(image) {
return image.addBands(image.expression(
      '(((B8 * B4)-(B3 * B2)) / ((B8*B4)+(B3*B2)))**(1/2)', {
        'B4': image.select(['B4']),
        'B2': image.select(['B2']),
        'B3': image.select(['B3']),
        'B8': image.select(['B8'])
      }
    ).rename('CRSI'));
}
var collection = collection.map(addCRSI);

var CRSI = collection.select(['CRSI']);
var CRSImed = CRSI.median(); //I just changed the name of this variable ;)

// Create palettes for display of CRSI
var CRSI_pal = ['#d73027', '#f46d43', '#fdae61', '#fee08b', '#d9ef8b',
'#a6d96a'];

// Display CRSI results on map
Map.addLayer(CRSImed.clip(polygon), {min: 0, max:0.9, palette: CRSI_pal}, 'CRSI');

// Export the image, specifying scale and region.
Export.image.toDrive({
image: CRSImed, //replace with your image name variable
description: 'sab_sen2_CRSI_med',
scale: 10,
maxPixels: 1e12,
region: polygon, //polygon name that you have drawn at step 1
folder:'sab_sen2_CRSI_med',
crs: "EPSG:26912"
});
